{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/what-is-html-canvas/","result":{"data":{"markdownRemark":{"html":"<p>I've heard all about the Canvas API and, admittedly, have even used it multiple times without knowing exactly how it works or the full potential of it. The intention of this post is to help understand the best use cases for this API.</p>\n<p>So let's start with the basic definition.</p>\n<h2>What is the Canvas API?</h2>\n<p>In the shortest way possible the Canvas API is defined by MDN as the following:</p>\n<blockquote>\n<p>The Canvas API provides a means for drawing graphics via JavaScript and the HTML <code>&#x3C;canvas></code> element.</p>\n</blockquote>\n<p>At face value this means that the Canvas API has to consist of at least two parts. The space (read: canvas) in which our graphics will be drawn, and the means by which to draw them. So all the HTML really does here is provide a space for the JavaScript to actually draw the graphics.</p>\n<h2>Why is there a specific canvas element?</h2>\n<p>The canvas element is similar to the <code>&#x3C;img></code> element except it doesn't have any <code>src</code> or <code>alt</code> attributes. The only attributes that the canvas must have are width and height, however it can also be sized using CSS. Providing a fallback element is super simple, just place the element inside the <code>&#x3C;canvas></code> tag in order to do so.</p>\n<p>Using the specific <code>&#x3C;canvas></code> tag ensures that only browsers capable of using the API are doing so, and also provides us a way to provide fallback content.</p>\n<h2>What are the best use cases for the Canvas API?</h2>\n<p>The Canvas API has a vast variety of use cases, many of which I would have never thought of. Rather than just thinking of Canvas as a way to draw static 2 dimensional shapes, it can also be used to create animations, build graphic design editors, visualizations, and much more.</p>\n<p>The easiest way to learn more about this API is to start messing around with it!</p>\n<h2>How do I use the Canvas API?</h2>\n<p>For a full tutorial on how to use the Canvas API, head on over to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial\">MDN's Canvas Tutorial</a> to get started.</p>\n<p>Basically you need to create a canvas element (with a fallback):</p>\n<h3>index.html</h3>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"synthwave\"  >\n          <code slot=\"code\">...\n&lt;canvas id=&quot;my-canvas&quot; width=&quot;200&quot; height=&quot;200&quot;&gt;\n    This is your fallback content.\n&lt;/canvas&gt;\n...</code>\n        </deckgo-highlight-code>\n<p>Then you need to grab your canvas element in your JavaScript code, and access the drawing context:</p>\n<h3>index.js</h3>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"synthwave\"  >\n          <code slot=\"code\">...\nvar canvas = document.getElementById(&#39;my-canvas&#39;);\nvar ctx = canvas.getContext(&#39;2d&#39;);\n...</code>\n        </deckgo-highlight-code>\n<p>And after that you can begin drawing! Note that canvas only support rectangles and paths. A rectangle isâ€¦ well a rectangle, and a path is a list of points connected by lines. Every other shape you can imagine can be created using these two primitives, but these are the only two that are \"built in\".</p>\n<h2>Tutorial with code?</h2>\n<p>If there's any interest in a more in depth tutorial on this topic, please leave a comment or yell at me on twitter and I'll post one soon.</p>\n<p>Thanks for reading!</p>","frontmatter":{"date":"March 04, 2020","slug":"/blog/what-is-html-canvas","title":"What is HTML Canvas?"}}},"pageContext":{"id":"7ab1233a-7d4d-5721-97f9-381a32acd1f3","frontmatter__slug":"/blog/what-is-html-canvas","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":[]}