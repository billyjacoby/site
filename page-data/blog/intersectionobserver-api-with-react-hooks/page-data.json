{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/intersectionobserver-api-with-react-hooks/","result":{"data":{"markdownRemark":{"html":"<p>A simple demo and tutorial showing how to simply use the intersection observer API with React Hooks</p>\n<p>Here is a brief synopsis of what we will do:</p>\n<ul>\n<li>create-react-app</li>\n<li>Initial project setup</li>\n<li>intersection-observer polyfill</li>\n<li>Add elements, update CSS</li>\n<li>Write the hook</li>\n<li>Initialize the state</li>\n<li>Construct the IntersectionObserver instance</li>\n<li>Ensure to only observe the element intersecting once</li>\n<li>Show the hook in action, via the console</li>\n</ul>\n<p>If you want to see it in action checkout the demo <a href=\"https://billyjacoby.github.io/intersection-observer-hooks\">here!</a><br>\n(be sure to have the developer console open)</p>\n<p>We'll demonstrate how this works on a simple <code>create-react-app</code> skeleton.</p>\n<p>First thing we'll do is run:</p>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"synthwave\"  >\n          <code slot=\"code\">create-react-app intersection-observer-hooks\ncd intersection-observer-hooks</code>\n        </deckgo-highlight-code>\n<p>After the initialization we'll install the polyfill for the API, to ensure support for all browsers.</p>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"synthwave\"  >\n          <code slot=\"code\">yarn add intersection-observer</code>\n        </deckgo-highlight-code>\n<p>Next we'll add a few elements to our app, and tweak the CSS to enable us to see how everything works</p>\n<p><strong>App.js</strong></p>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"synthwave\"  >\n          <code slot=\"code\">...\n&lt;header className=&quot;App-header&quot;&gt;\n      &lt;img src={logo} className=&quot;App-logo&quot; alt=&quot;logo&quot; /&gt;\n      &lt;p&gt;\n        Edit &lt;code&gt;src/App.js&lt;/code&gt; and save to reload.\n      &lt;/p&gt;\n      &lt;a\n        className=&quot;App-link&quot;\n        href=&quot;https://reactjs.org&quot;\n        target=&quot;_blank&quot;\n        rel=&quot;noopener noreferrer&quot;\n      &gt;\n        Learn React\n      &lt;/a&gt;\n    &lt;/header&gt;\n&lt;div className=&quot;full-height one&quot;&gt;\n      &lt;div className=&quot;item-one&quot; /&gt;\n    &lt;/div&gt;\n    &lt;div className=&quot;full-height two&quot;&gt;\n      &lt;div className=&quot;item-two&quot; ref={elementRef}&gt;\n        {inView &amp;&amp; &lt;p&gt;I&#39;m in view!&lt;/p&gt;}\n      &lt;/div&gt;\n    &lt;/div&gt;\n    ...</code>\n        </deckgo-highlight-code>\n<p><strong>App.css</strong></p>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"synthwave\"  >\n          <code slot=\"code\">... .full-height {\n  height: 100vh;\n  border: white dotted 1px;\n  margin: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.one {\n  background-color: #61dafb;\n  color: #282c34;\n}\n\n.two {\n  background-color: #282c34;\n  color: #61dafb;\n}\n\n.item-one {\n  background-color: #282c34;\n  color: #61dafb;\n  height: 30%;\n  width: 30%;\n}\n\n.item-two {\n  color: #282c34;\n  background-color: #61dafb;\n  height: 30%;\n  width: 30%;\n}</code>\n        </deckgo-highlight-code>\n<p>Next we will create our hook in a separate file called <code>useIntersectionObserver.js</code></p>\n<p>The first thing we'll do in this file is configure our hook to take the necessary parameters, configure out state, and output the information we'll want to see.</p>\n<p><strong>useIntersectionObserver.js</strong></p>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"synthwave\"  >\n          <code slot=\"code\">import { useState, useEffect } from &quot;react&quot;\n\nexport const useIntersectionObserver = (\n  ref,\n  { threshold, root, rootMargin }\n) =&gt; {\n  // configure the state\n  const [state, setState] = useState({\n    inView: false,\n    triggered: false,\n    entry: undefined,\n  })\n\n  return [state.inView, state.entry]\n}</code>\n        </deckgo-highlight-code>\n<p>This hook will take a reference to the DOM node, and the options that you would like to pass in to the IntersectionObserver object; threshold, root, and rootMargin. For more information on what these options do, you can check out the MDN docs on the API <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/IntersectionObserver\">here.</a></p>\n<p>Now we'll configure our IntersectionObserver object, and write the callback function to update our state when our DOM node's intersectionRation is greater than 0.</p>\n<p><strong>useIntersectionObserver.js</strong></p>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"synthwave\"  >\n          <code slot=\"code\">...\nconst [state, setState] = useState({\n    inView: false,\n    triggered: false,\n    entry: undefined\n  });\n\n  const observer = new IntersectionObserver(\n    (entries, observerInstance) =&gt; {\n      // checks to see if the element is intersecting\n      if (entries[0].intersectionRatio &gt; 0) {\n        // if it is update the state, we set triggered as to not re-observe the element\n        setState({\n          inView: true,\n          triggered: true,\n          entry: observerInstance\n        });\n        // unobserve the element\n        observerInstance.unobserve(ref.current);\n      }\n      return;\n    },\n    {\n      threshold: threshold || 0,\n      root: root || null,\n      rootMargin: rootMargin || &quot;0%&quot;\n    }\n  );\n...</code>\n        </deckgo-highlight-code>\n<p>Next we'll use React's useEffect hook to ensure that the DOM node reference exists and also to make sure that the inView state has not already been triggered as true. This will finish up our hook, the finished result should look as follows:</p>\n<p><strong>useIntersectionObserver.js</strong></p>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"synthwave\"  >\n          <code slot=\"code\">import { useState, useEffect } from &quot;react&quot;\n\nexport const useIntersectionObserver = (\n  ref,\n  { threshold, root, rootMargin }\n) =&gt; {\n  // configure the state\n  const [state, setState] = useState({\n    inView: false,\n    triggered: false,\n    entry: undefined,\n  })\n\n  const observer = new IntersectionObserver(\n    (entries, observerInstance) =&gt; {\n      // checks to see if the element is intersecting\n      if (entries[0].intersectionRatio &gt; 0) {\n        // if it is update the state, we set triggered as to not re-observe the element\n        setState({\n          inView: true,\n          triggered: true,\n          entry: observerInstance,\n        })\n        // unobserve the element\n        observerInstance.unobserve(ref.current)\n      }\n      return\n    },\n    {\n      threshold: threshold || 0,\n      root: root || null,\n      rootMargin: rootMargin || &quot;0%&quot;,\n    }\n  )\n\n  useEffect(() =&gt; {\n    // check that the element exists, and has not already been triggered\n    if (ref.current &amp;&amp; !state.triggered) {\n      observer.observe(ref.current)\n    }\n  })\n\n  return [state.inView, state.entry]\n}</code>\n        </deckgo-highlight-code>\n<p>Now that we have written our hook, its time to import it into our app and see if its working.</p>\n<p><strong>App.js</strong></p>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"synthwave\"  >\n          <code slot=\"code\">...\nimport { useIntersectionObserver } from &quot;./useIntersectionObserver&quot;;\n\nfunction App() {\n  // Create the ref to our element\n  const elementRef = useRef(null);\n  const [inView, entry] = useIntersectionObserver(elementRef, {\n    threshold: 0\n  });\n\n  // console.log our state everytime its updated to see if it works.\n  useEffect(() =&gt; {\n    console.log(inView);\n  }, [inView]);\n\n  return (\n    &lt;div className=&quot;App&quot;&gt;\n      &lt;header className=&quot;App-header&quot;&gt;\n        &lt;img src={logo} className=&quot;App-logo&quot; alt=&quot;logo&quot; /&gt;\n        &lt;p&gt;\n          Edit &lt;code&gt;src/App.js&lt;/code&gt; and save to reload.\n        &lt;/p&gt;\n        &lt;a\n          className=&quot;App-link&quot;\n          href=&quot;https://reactjs.org&quot;\n          target=&quot;_blank&quot;\n          rel=&quot;noopener noreferrer&quot;\n        &gt;\n          Learn React\n        &lt;/a&gt;\n      &lt;/header&gt;\n      &lt;div className=&quot;full-height one&quot;&gt;\n        &lt;div className=&quot;item-one&quot; /&gt;\n      &lt;/div&gt;\n      &lt;div className=&quot;full-height two&quot;&gt;\n        &lt;div className=&quot;item-two&quot; ref={elementRef}&gt;\n          {inView &amp;&amp; &lt;p&gt;I&#39;m in view!&lt;/p&gt;}\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;</code>\n        </deckgo-highlight-code>\n<p>Once this is all wired up, run <code>yarn start</code> and open your developer console. When the app first loads you should see that the state is first false, then when we scroll to the selected div, the state turns to true!</p>\n<p>Thanks for reading and be sure to let me know if you've enjoyed this tutorial!</p>\n<p>Shortly I'll post another that shows how to use this to animate elements onto the screen using GSAP.</p>","frontmatter":{"date":"April 23, 2019","slug":"/blog/intersectionobserver-api-with-react-hooks","title":"IntersectionObserver API with React Hooks"}}},"pageContext":{"id":"7084be48-0931-5290-b1fb-984cb6b9ba2f","frontmatter__slug":"/blog/intersectionobserver-api-with-react-hooks","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":[]}